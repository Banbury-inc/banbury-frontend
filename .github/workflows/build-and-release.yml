name: Build and Release

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  e2e-tests:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install Playwright
        run: |
          cd packages/frontend
          npx playwright install
          npx playwright install-deps

      - name: Build the app
        run: npm run build

      - name: Setup Chrome sandbox for Linux
        if: runner.os == 'Linux'
        run: |
          sudo chown root:root /home/runner/work/banbury-frontend/banbury-frontend/packages/frontend/node_modules/electron/dist/chrome-sandbox
          sudo chmod 4755 /home/runner/work/banbury-frontend/banbury-frontend/packages/frontend/node_modules/electron/dist/chrome-sandbox

      - name: Run E2E Tests
        if: runner.os == 'Linux'
        run: |
          cd packages/frontend
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- npm run test:e2e
        env:
          DISPLAY: ':99.0'
          ELECTRON_ENABLE_LOGGING: true
          DEBUG: electron*,playwright*
          NODE_ENV: development

      - name: Run E2E Tests (Windows)
        if: runner.os == 'Windows'
        run: |
          cd packages/frontend
          npm run test:e2e
        env:
          ELECTRON_ENABLE_LOGGING: true
          DEBUG: electron*,playwright*
          NODE_ENV: test


      - name: Run E2E Tests (macOS)
        if: runner.os == 'macOS'
        run: |
          cd packages/frontend
          npm run test:e2e
        env:
          ELECTRON_ENABLE_LOGGING: true
          DEBUG: electron*,playwright*
          NODE_ENV: test
        
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.os }}
          path: packages/frontend/playwright-report/
          retention-days: 30

  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, unit-tests, e2e-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'

      # Linux-specific setup
      - name: Install Snapcraft
        if: runner.os == 'Linux'
        run: |
          sudo snap install snapcraft --classic
          sudo apt-get update
          sudo apt-get install -y rpm

      # macOS-specific setup
      - name: Install Python and Build Tools for macOS
        if: runner.os == 'macOS'
        run: |
          brew install python-setuptools
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade pip setuptools

      - name: Install the Apple certificate
        if: runner.os == 'macOS'
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Remove certificate file
          rm certificate.p12
        env:
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: keychainpassword

      - name: Install dependencies
        run: npm install

      - name: Build all packages
        run: npm run build

      # For macOS: Build, Sign, and Notarize in the correct order
      - name: Build and Sign macOS App
        if: runner.os == 'macOS'
        run: |
          cd packages/frontend
          npm run package:app
        env:
          CSC_KEYCHAIN: build.keychain
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Notarize macOS App Bundle
        if: runner.os == 'macOS'
        run: |
          APP_NAME="Banbury"
          export APP_PATH="./packages/frontend/dist/mac-arm64/${APP_NAME}.app"
          echo "Notarizing app bundle: $APP_PATH"
          node ./scripts/notarize.ts
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Create DMG and ZIP for macOS
        if: runner.os == 'macOS'
        run: |
          cd packages/frontend
          npm run package:dist
        env:
          CSC_KEYCHAIN: build.keychain
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Notarize macOS Distribution Files
        if: runner.os == 'macOS'
        run: |
          APP_NAME="Banbury"
          VERSION=$(node -p "require('./packages/frontend/package.json').version")
          WORKSPACE_PATH="$GITHUB_WORKSPACE"
          
          # Notarize DMG
          export APP_PATH="$WORKSPACE_PATH/packages/frontend/dist/${APP_NAME}-${VERSION}-arm64.dmg"
          echo "Notarizing DMG: $APP_PATH"
          [ -e "$APP_PATH" ] && node ./scripts/notarize.ts
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # For non-macOS: Build and package
      - name: Package for Linux
        if: runner.os == 'Linux'
        run: |
          cd packages/frontend
          # Install required dependencies
          sudo snap install snapcraft --classic
          sudo apt-get update
          sudo apt-get install -y rpm
          
          # Build without publishing to Snapcraft store
          npm run deploy
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EP_PRE_RELEASE: true
          EP_DRAFT: false
          SNAP_STORE_SKIP_UPLOAD: true

      - name: Package for Windows
        if: runner.os == 'Windows'
        run: |
          cd packages/frontend
          npm run deploy
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EP_PRE_RELEASE: true
          EP_DRAFT: false

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            packages/frontend/dist/**/*
            packages/frontend/dist/**/*.yml
            packages/frontend/dist/**/*.yaml

      - name: Upload Core Package Artifact
        if: runner.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: core-package
          path: packages/core/dist
          
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-artifacts
          path: ./dist

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-artifacts
          path: ./dist

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-artifacts
          path: ./dist

      - name: Download Core Package
        uses: actions/download-artifact@v4
        with:
          name: core-package
          path: ./packages/core/dist

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version ./packages/frontend/package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create and push a new tag
        env:
          VERSION: ${{ env.VERSION }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag exists
          if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Creating new tag v$VERSION"
            git tag "v$VERSION"
            git push https://$GH_TOKEN@github.com/${{ github.repository }} "v$VERSION"
          else
            echo "Tag v$VERSION already exists, skipping tag creation"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          draft: false
          prerelease: false
          make_latest: "true"
          files: |
            dist/**/*.AppImage
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.zip
            dist/**/latest*.yml
            dist/**/latest*.yaml
            dist/**/*blockmap
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  publish-npm:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Download Core Package
        uses: actions/download-artifact@v4
        with:
          name: core-package
          path: ./packages/core/dist

      - name: Install dependencies
        run: cd packages/core && npm install

      - name: Publish to NPM
        run: |
          cd packages/core
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
