name: Build and Release

on:
  push:
    branches:
      - main  # Triggers the workflow on every push to the main branch

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Add Windows support
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'
          cache: 'npm'

      - name: Install Python and Build Tools for macOS
        if: runner.os == 'macOS'
        run: |
          brew install python-setuptools
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade pip setuptools

      - name: Install Apple Certificate for macOS
        if: runner.os == 'macOS'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          
          # Import certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Clean up
          rm certificate.p12

      - name: Install dependencies
        run: npm install --force

      - name: Build the app
        run: npm run build

      - name: Package with Electron Builder
        run: npm run deploy
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          EP_PRE_RELEASE: true
          EP_DRAFT: false
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            packages/**/*
            dist/**/*.yml
            dist/**/*.yaml
          
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history for tagging

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-artifacts
          path: ./packages

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifacts
          path: ./packages

      - name: Download macos Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-artifacts
          path: ./packages

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Create and push a new tag
        env:
          VERSION: ${{ env.VERSION }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v$VERSION"
          git push https://$PAT@github.com/${{ github.repository }} "v$VERSION"
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          files: |
            packages/**/*.AppImage
            packages/**/*.exe
            packages/**/*.dmg
            packages/**/latest*.yml
            packages/**/latest*.yaml
            packages/**/*blockmap
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
